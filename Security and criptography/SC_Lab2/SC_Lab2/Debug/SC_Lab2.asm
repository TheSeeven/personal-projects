; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29912.0 

	TITLE	C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\Debug\SC_Lab2.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_charMatrixUppercase
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__9F5F55CA_SC_Lab2@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_charMatrixUppercase DB 041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_display
PUBLIC	_getCoordinates
PUBLIC	_criptarePolybus
PUBLIC	_decriptarePolybus
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_04LLKPOCGK@?$CFd?$CFd@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_0CA@BDNOEJIF@Introduceti?5textul?5de?5criptat?3?5@ ; `string'
PUBLIC	??_C@_0P@PMHOIOFD@Dupa?5Polybus?3?5@		; `string'
PUBLIC	??_C@_0BG@OPLBKFJK@?6Decriptare?5Polybus?3?5@	; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_memset:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@OPLBKFJK@?6Decriptare?5Polybus?3?5@
CONST	SEGMENT
??_C@_0BG@OPLBKFJK@?6Decriptare?5Polybus?3?5@ DB 0aH, 'Decriptare Polybus'
	DB	': ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMHOIOFD@Dupa?5Polybus?3?5@
CONST	SEGMENT
??_C@_0P@PMHOIOFD@Dupa?5Polybus?3?5@ DB 'Dupa Polybus: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BDNOEJIF@Introduceti?5textul?5de?5criptat?3?5@
CONST	SEGMENT
??_C@_0CA@BDNOEJIF@Introduceti?5textul?5de?5criptat?3?5@ DB 'Introduceti '
	DB	'textul de criptat: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLKPOCGK@?$CFd?$CFd@
CONST	SEGMENT
??_C@_04LLKPOCGK@?$CFd?$CFd@ DB '%d%d', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\SC_Lab2.c
;	COMDAT _main
_TEXT	SEGMENT
_i$1 = -180						; size = 4
_userInput$ = -168					; size = 50
_criptedPolybus$ = -108					; size = 100
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 68   : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9F5F55CA_SC_Lab2@c
	call	@__CheckForDebuggerJustMyCode@4

; 69   :     struct Coordinates criptedPolybus[50];
; 70   :     char userInput[50];
; 71   :     printf("Introduceti textul de criptat: ");

	push	OFFSET ??_C@_0CA@BDNOEJIF@Introduceti?5textul?5de?5criptat?3?5@
	call	_printf
	add	esp, 4

; 72   :     fgets(userInput, 50, stdin);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	50					; 00000032H
	lea	eax, DWORD PTR _userInput$[ebp]
	push	eax
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 73   : 
; 74   :     printf("Dupa Polybus: ");

	push	OFFSET ??_C@_0P@PMHOIOFD@Dupa?5Polybus?3?5@
	call	_printf
	add	esp, 4

; 75   :     criptarePolybus(userInput, criptedPolybus);

	lea	eax, DWORD PTR _criptedPolybus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _userInput$[ebp]
	push	ecx
	call	_criptarePolybus
	add	esp, 8

; 76   :     for (int i = 0; i < 50; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$1[ebp], 50			; 00000032H
	jge	SHORT $LN3@main

; 77   :         if (criptedPolybus[i].i == 0) break;

	mov	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR _criptedPolybus$[ebp+eax*2]
	test	ecx, ecx
	jne	SHORT $LN5@main
	jmp	SHORT $LN3@main
$LN5@main:

; 78   :         display(criptedPolybus[i]);

	mov	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, WORD PTR _criptedPolybus$[ebp+eax*2]
	push	ecx
	call	_display
	add	esp, 4

; 79   :     }

	jmp	SHORT $LN2@main
$LN3@main:

; 80   : 
; 81   :     printf("\nDecriptare Polybus: ");

	push	OFFSET ??_C@_0BG@OPLBKFJK@?6Decriptare?5Polybus?3?5@
	call	_printf
	add	esp, 4

; 82   :     decriptarePolybus(criptedPolybus);

	lea	eax, DWORD PTR _criptedPolybus$[ebp]
	push	eax
	call	_decriptarePolybus
	add	esp, 4

; 83   :     return 0;

	xor	eax, eax

; 84   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@main:
	DD	2
	DD	$LN9@main
$LN9@main:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN7@main
	DD	-168					; ffffff58H
	DD	50					; 00000032H
	DD	$LN8@main
$LN8@main:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN7@main:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\SC_Lab2.c
;	COMDAT _decriptarePolybus
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_inputCoordinates$ = 8					; size = 4
_decriptarePolybus PROC					; COMDAT

; 58   : void decriptarePolybus(struct Coordinates* inputCoordinates) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F5F55CA_SC_Lab2@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :     for (int i = 0; i < 50; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@decriptare
$LN2@decriptare:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@decriptare:
	cmp	DWORD PTR _i$1[ebp], 50			; 00000032H
	jge	SHORT $LN1@decriptare

; 60   :         if (inputCoordinates[i].i == 0) {

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _inputCoordinates$[ebp]
	movsx	edx, BYTE PTR [ecx+eax*2]
	test	edx, edx
	jne	SHORT $LN5@decriptare

; 61   :             break;

	jmp	SHORT $LN1@decriptare
$LN5@decriptare:

; 62   :         }
; 63   :         printf("%c", charMatrixUppercase[inputCoordinates[i].i-1][inputCoordinates[i].j-1]+32);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _inputCoordinates$[ebp]
	movsx	edx, BYTE PTR [ecx+eax*2]
	sub	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _inputCoordinates$[ebp]
	movsx	ecx, BYTE PTR [edx+ecx*2+1]
	movsx	edx, BYTE PTR _charMatrixUppercase[eax+ecx-1]
	add	edx, 32					; 00000020H
	push	edx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc@
	call	_printf
	add	esp, 8

; 64   :     }

	jmp	SHORT $LN2@decriptare
$LN1@decriptare:

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_decriptarePolybus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\SC_Lab2.c
;	COMDAT _criptarePolybus
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_resultCounter$ = -8					; size = 4
_inputString$ = 8					; size = 4
_dest$ = 12						; size = 4
_criptarePolybus PROC					; COMDAT

; 45   : void criptarePolybus(char* inputString, struct Coordinates* dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F5F55CA_SC_Lab2@c
	call	@__CheckForDebuggerJustMyCode@4

; 46   :     unsigned int resultCounter = 0;

	mov	DWORD PTR _resultCounter$[ebp], 0

; 47   :     memset(dest, 0, 50 * sizeof(struct Coordinates));

	push	100					; 00000064H
	push	0
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 48   :     for (int i = 0; i < 50; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@criptarePo
$LN2@criptarePo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@criptarePo:
	cmp	DWORD PTR _i$1[ebp], 50			; 00000032H
	jge	SHORT $LN1@criptarePo

; 49   :         if (inputString[i] == '\n') {

	mov	eax, DWORD PTR _inputString$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN5@criptarePo

; 50   :             break;

	jmp	SHORT $LN1@criptarePo
$LN5@criptarePo:

; 51   :         }
; 52   :         if (inputString[i] == ' ') { continue; }

	mov	eax, DWORD PTR _inputString$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN6@criptarePo
	jmp	SHORT $LN2@criptarePo
$LN6@criptarePo:

; 53   :         dest[resultCounter] = getCoordinates(inputString[i]);

	mov	eax, DWORD PTR _inputString$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_getCoordinates
	add	esp, 4
	mov	edx, DWORD PTR _resultCounter$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+edx*2], ax

; 54   :         resultCounter++;

	mov	eax, DWORD PTR _resultCounter$[ebp]
	add	eax, 1
	mov	DWORD PTR _resultCounter$[ebp], eax

; 55   :     }

	jmp	SHORT $LN2@criptarePo
$LN1@criptarePo:

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_criptarePolybus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\SC_Lab2.c
;	COMDAT _getCoordinates
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_i$2 = -20						; size = 4
_res$ = -8						; size = 2
_character$ = 8						; size = 1
_getCoordinates PROC					; COMDAT

; 26   : struct Coordinates getCoordinates(char character) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F5F55CA_SC_Lab2@c
	call	@__CheckForDebuggerJustMyCode@4

; 27   :     struct Coordinates res;
; 28   :     if (character == 'i' || character == 'j') {

	movsx	eax, BYTE PTR _character$[ebp]
	cmp	eax, 105				; 00000069H
	je	SHORT $LN9@getCoordin
	movsx	eax, BYTE PTR _character$[ebp]
	cmp	eax, 106				; 0000006aH
	jne	SHORT $LN8@getCoordin
$LN9@getCoordin:

; 29   :         res.i = 2;

	mov	BYTE PTR _res$[ebp], 2

; 30   :         res.j = 4;

	mov	BYTE PTR _res$[ebp+1], 4

; 31   :         return res;

	mov	ax, WORD PTR _res$[ebp]
	jmp	SHORT $LN1@getCoordin
$LN8@getCoordin:

; 32   :     }
; 33   : 
; 34   :     for (int i = 0; i < 5; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@getCoordin
$LN2@getCoordin:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@getCoordin:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	SHORT $LN1@getCoordin

; 35   :         for (int j = 0; j < 5; j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@getCoordin
$LN5@getCoordin:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@getCoordin:
	cmp	DWORD PTR _j$1[ebp], 5
	jge	SHORT $LN6@getCoordin

; 36   :             if ((charMatrixUppercase[i][j] == ((character)-32)) || charMatrixUppercase[i][j] == character) {

	imul	eax, DWORD PTR _i$2[ebp], 5
	mov	ecx, DWORD PTR _j$1[ebp]
	movsx	edx, BYTE PTR _charMatrixUppercase[eax+ecx]
	movsx	eax, BYTE PTR _character$[ebp]
	sub	eax, 32					; 00000020H
	cmp	edx, eax
	je	SHORT $LN11@getCoordin
	imul	eax, DWORD PTR _i$2[ebp], 5
	mov	ecx, DWORD PTR _j$1[ebp]
	movsx	edx, BYTE PTR _charMatrixUppercase[eax+ecx]
	movsx	eax, BYTE PTR _character$[ebp]
	cmp	edx, eax
	jne	SHORT $LN10@getCoordin
$LN11@getCoordin:

; 37   :                 res.i = i+1;

	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	BYTE PTR _res$[ebp], al

; 38   :                 res.j = j+1;

	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	BYTE PTR _res$[ebp+1], al

; 39   :                 return res;

	mov	ax, WORD PTR _res$[ebp]
	jmp	SHORT $LN1@getCoordin
$LN10@getCoordin:

; 40   :             }
; 41   :         }

	jmp	SHORT $LN5@getCoordin
$LN6@getCoordin:

; 42   :     }

	jmp	SHORT $LN2@getCoordin
$LN1@getCoordin:

; 43   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@getCoordin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@getCoordin:
	DD	1
	DD	$LN14@getCoordin
$LN14@getCoordin:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN13@getCoordin
$LN13@getCoordin:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_getCoordinates ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Onedrive\Documents\Facultate\Cursuri\Anul 3\Semestrul 2\Securitate si Criptografie\SC_Lab2\SC_Lab2\SC_Lab2.c
;	COMDAT _display
_TEXT	SEGMENT
_coord$ = 8						; size = 2
_display PROC						; COMDAT

; 13   : void display(struct Coordinates coord) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9F5F55CA_SC_Lab2@c
	call	@__CheckForDebuggerJustMyCode@4

; 14   :     printf("%d%d", coord.i,coord.j);

	movsx	eax, BYTE PTR _coord$[ebp+1]
	push	eax
	movsx	ecx, BYTE PTR _coord$[ebp]
	push	ecx
	push	OFFSET ??_C@_04LLKPOCGK@?$CFd?$CFd@
	call	_printf
	add	esp, 12					; 0000000cH

; 15   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_display ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
